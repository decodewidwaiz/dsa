{
  "metadata": {
    "totalProblems": 1,
    "lastUpdated": "2025-08-28T11:35:35.043Z",
    "breakdown": {
      "Codechef": {
        "total": 0,
        "Easy": 0,
        "Medium": 0,
        "Hard": 0
      },
      "Gfg": {
        "total": 0,
        "Easy": 0,
        "Medium": 0,
        "Hard": 0
      },
      "Leetcode": {
        "total": 1,
        "Easy": 1,
        "Medium": 0,
        "Hard": 0
      },
      "Hackerrank": {
        "total": 0,
        "Easy": 0,
        "Medium": 0,
        "Hard": 0
      }
    }
  },
  "problems": [
    {
      "id": "leetcode-easy-remove-duplicates-from-sorted-array",
      "platform": "Leetcode",
      "difficulty": "Easy",
      "problemName": "Remove Duplicates from Sorted Array",
      "language": "java",
      "files": {
        "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        if(nums.length == 0) return 0;\n        int j=0;\n        for(int i=1;i<nums.length;i++){\n            if(nums[i] != nums[j]){\n                j++;\n                nums[j] = nums[i];\n            }\n        }\n        return j+1;\n    }\n}",
        "readme": "ArrayTwoPointers\n\nGiven an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\n\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\n\n\n\tChange the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\n\tReturn k.\n\n\nCustom Judge:\n\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n\nIf all assertions pass, then your solution will be accepted.\n\n \nExample 1:\n\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\nExample 2:\n\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 3 * 104\n\t-100 <= nums[i] <= 100\n\tnums is sorted in non-decreasing order.",
        "notes": "Remove Duplicates from Sorted Array\n\n          - Summary: The code uses an integer array to store the input numbers. It employs a two-pointer approach: one pointer ('i') iterates through the array, and another ('j') tracks the index of the last unique element encountered. If 'nums[i]' is different from 'nums[j]', it means a new unique element is found; hence, 'j' is incremented, and 'nums[j]' is updated with 'nums[i]'. Finally, 'j+1' represents the length of the array with duplicates removed.\n\n          - Time Complexity: O(n) because the code iterates through the input array once.\n          - Space Complexity: O(1) because it uses only a constant amount of extra space (two integer variables 'i' and 'j')."
      },
      "hasCode": true,
      "hasReadme": true,
      "hasNotes": true,
      "lastUpdated": "2025-08-28T11:35:35.041Z"
    }
  ]
}