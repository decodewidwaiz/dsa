{
  "metadata": {
    "totalProblems": 3,
    "lastUpdated": "2025-08-28T12:25:36.683Z",
    "breakdown": {
      "Codechef": {
        "total": 0,
        "Easy": 0,
        "Medium": 0,
        "Hard": 0
      },
      "Gfg": {
        "total": 1,
        "Easy": 1,
        "Medium": 0,
        "Hard": 0
      },
      "Leetcode": {
        "total": 2,
        "Easy": 2,
        "Medium": 0,
        "Hard": 0
      },
      "Hackerrank": {
        "total": 0,
        "Easy": 0,
        "Medium": 0,
        "Hard": 0
      }
    }
  },
  "problems": [
    {
      "id": "gfg-easy-first-repeating-element",
      "platform": "Gfg",
      "difficulty": "Easy",
      "problemName": "First Repeating Element",
      "language": "java",
      "files": {
        "code": "// User function Template for Java\n\nclass Solution {\n    // Function to return the position of the first repeating element.\n    public static int firstRepeated(int[] arr) {\n        // Your code here\n        int n = arr.length;\n        HashMap<Integer, Integer> map = new HashMap<>();\n        int first = Integer.MAX_VALUE;\n        for(int i=0;i<n;i++){\n            if(map.containsKey(arr[i])){\n                int idx =map.get(arr[i]);\n                if(idx<first){\n                    first = idx;\n                }\n            }\n            else{\n                map.put(arr[i], i+1);\n            }\n        }\n        return (first == Integer.MAX_VALUE) ? -1 : first;\n    }\n}",
        "readme": "Arrays,Hash,Data_Structures\n\nFirst Repeating Element\nDifficulty: EasyAccuracy: 32.57%Submissions: 301K+Points: 2Average Time: 15m\n\nGiven an array arr[], find the first repeating element. The element should occur more than once and the index of its first occurrence should be the smallest.\n\nNote:- The position you return should be according to 1-based indexing. \n\nExamples:\n\nInput: arr[] = [1, 5, 3, 4, 3, 5, 6]\nOutput: 2\nExplanation: 5 appears twice and its first appearance is at index 2 which is less than 3 whose first the occurring index is 3.\nInput: arr[] = [1, 2, 3, 4]\nOutput: -1\nExplanation: All elements appear only once so answer is -1.\n\nConstraints:\n1 ≤ arr.size() ≤ 106\n0 ≤ arr[i] ≤ 106\n\nTry more examples\nExpected Complexities\nCompany Tags\nAmazonOracle\nTopic Tags\nRelated Articles\nReport An Issue\nIf you are facing any issue on this page. Please let us know.",
        "notes": "First Repeating Element\n\n          - Summary: The code uses a HashMap to store array elements as keys and their indices as values. It iterates through the input array; if an element is already in the HashMap (meaning it's a repeated element), it updates the index of the first occurrence if the current index is smaller.  If an element is not in the HashMap, it's added with its index. Finally, it returns the index of the first repeated element or -1 if no element is repeated.\n\n          - Time Complexity: O(n) because the code iterates through the array once. HashMap operations (containsKey, get, put) take constant time on average.\n          - Space Complexity: O(n) in the worst case because the HashMap can store up to n key-value pairs if all elements are unique. In the best case it can be O(1) if all elements are same."
      },
      "hasCode": true,
      "hasReadme": true,
      "hasNotes": true,
      "lastUpdated": "2025-08-28T12:25:36.485Z"
    },
    {
      "id": "leetcode-easy-remove-duplicates-from-sorted-array",
      "platform": "Leetcode",
      "difficulty": "Easy",
      "problemName": "Remove Duplicates from Sorted Array",
      "language": "java",
      "files": {
        "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        if(nums.length == 0) return 0;\n        int j=0;\n        for(int i=1;i<nums.length;i++){\n            if(nums[i] != nums[j]){\n                j++;\n                nums[j] = nums[i];\n            }\n        }\n        return j+1;\n    }\n}",
        "readme": "ArrayTwoPointers\n\nGiven an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.\n\nConsider the number of unique elements of nums to be k, to get accepted, you need to do the following things:\n\n\n\tChange the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.\n\tReturn k.\n\n\nCustom Judge:\n\nThe judge will test your solution with the following code:\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n\nIf all assertions pass, then your solution will be accepted.\n\n \nExample 1:\n\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\nExample 2:\n\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 3 * 104\n\t-100 <= nums[i] <= 100\n\tnums is sorted in non-decreasing order.",
        "notes": "Remove Duplicates from Sorted Array\n\n          - Summary: The code uses an integer array to store the input numbers. It employs a two-pointer approach: one pointer ('i') iterates through the array, and another ('j') tracks the index of the last unique element encountered. If 'nums[i]' is different from 'nums[j]', it means a new unique element is found; hence, 'j' is incremented, and 'nums[j]' is updated with 'nums[i]'. Finally, 'j+1' represents the length of the array with duplicates removed.\n\n          - Time Complexity: O(n) because the code iterates through the input array once.\n          - Space Complexity: O(1) because it uses only a constant amount of extra space (two integer variables 'i' and 'j')."
      },
      "hasCode": true,
      "hasReadme": true,
      "hasNotes": true,
      "lastUpdated": "2025-08-28T12:25:36.488Z"
    },
    {
      "id": "leetcode-easy-two-sum",
      "platform": "Leetcode",
      "difficulty": "Easy",
      "problemName": "Two Sum",
      "language": "java",
      "files": {
        "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int n = nums.length;\n        for(int i=0; i<n;i++){\n            for(int j = i+1;j<n;j++){\n                if(nums[i]+nums[j] == target){\n                    return new int[] {i,j};\n                }\n            }\n        }\n        return new int[] {-1};\n    }\n}",
        "readme": "ArrayHashTable\n\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\n \nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\n\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\n\nExample 3:\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\n\n \nConstraints:\n\n\n\t2 <= nums.length <= 104\n\t-109 <= nums[i] <= 109\n\t-109 <= target <= 109\n\tOnly one valid answer exists.\n\n\n \nFollow-up: Can you come up with an algorithm that is less than O(n2) time complexity?",
        "notes": "Two Sum\n\n          - Summary: This Java code uses an array to find two numbers that add up to a target value.  It employs a nested loop approach: the outer loop iterates through each number in the input array, and the inner loop checks if the complement (target - current number) exists in the remaining elements. If a pair is found, their indices are returned; otherwise, it continues until either a pair is found or all combinations are checked. If no pair is found, it returns an array containing -1.\n\n          - Time Complexity: O(n^2) because of the nested for loops. The algorithm iterates through all possible pairs of numbers in the input array.\n          - Space Complexity: O(1). The space used by the algorithm is constant and does not depend on the size of the input array. It only uses a few integer variables."
      },
      "hasCode": true,
      "hasReadme": true,
      "hasNotes": true,
      "lastUpdated": "2025-08-28T12:25:36.489Z"
    }
  ]
}